/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package domogui;

import dispositivos.Actuador;
import fnArchivo.archivo;
import funciones.Validacion;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author julian
 */
public class frmDispAct extends javax.swing.JFrame {

    /**
     * Creates new form frmDispAct
     */
    public frmDispAct() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbBuscadorA = new javax.swing.JComboBox();
        tfselectorA = new javax.swing.JTextField();
        btConsultarA = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbActuadores = new javax.swing.JTable();
        btIngresarA = new javax.swing.JButton();
        btEditarA = new javax.swing.JButton();
        btEliminarA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dispositivos - Actuadores");

        cbBuscadorA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todo", "Id", "Nombre", "Ubicacion", "Modelo", "Fabrica", "Tipo", "Descripcion", "Estado" }));
        cbBuscadorA.setPreferredSize(new java.awt.Dimension(100, 25));
        cbBuscadorA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBuscadorAActionPerformed(evt);
            }
        });

        tfselectorA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfselectorAActionPerformed(evt);
            }
        });

        btConsultarA.setText("Consultar");
        btConsultarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarAActionPerformed(evt);
            }
        });

        tbActuadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Ubicacion", "Modelo", "Fabricante", "Tipo", "Descripcion", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tbActuadores);

        btIngresarA.setText("Ingresar");
        btIngresarA.setPreferredSize(new java.awt.Dimension(120, 27));
        btIngresarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIngresarAActionPerformed(evt);
            }
        });

        btEditarA.setText("Editar");
        btEditarA.setPreferredSize(new java.awt.Dimension(120, 27));
        btEditarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarAActionPerformed(evt);
            }
        });

        btEliminarA.setText("Eliminar");
        btEliminarA.setPreferredSize(new java.awt.Dimension(120, 27));
        btEliminarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(btIngresarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(btEditarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btEliminarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbBuscadorA, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfselectorA, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(btConsultarA, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBuscadorA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfselectorA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConsultarA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btIngresarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEditarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEliminarA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btConsultarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarAActionPerformed
        // TODO add your handling code here:
        consultarRegistroA();                                            
    }//GEN-LAST:event_btConsultarAActionPerformed

    private void tfselectorAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfselectorAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfselectorAActionPerformed

    private void btIngresarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIngresarAActionPerformed
        // TODO add your handling code here:
        frmInActuador ingresoAct = new frmInActuador();
        ingresoAct.setVisible(true);
    }//GEN-LAST:event_btIngresarAActionPerformed

    private void btEditarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarAActionPerformed
        // TODO add your handling code here:
        if(seleccionEdicionValida()){
            int fila = tbActuadores.getSelectedRow();
            String id = tbActuadores.getValueAt(fila,0).toString();
            ArrayList<Actuador> registros = new ArrayList();
            try{
                registros = archivo.obtener_registroA();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar los registros",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);    
            }
            
            if(Validacion.verDupliIdAct(registros,id)){
                frmEditActuador frm = new frmEditActuador(id,this);
                frm.setVisible(true);                
            }else{
                JOptionPane.showMessageDialog(this,
                    "El registro seleccionado no existe",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);                    
            }            
        }
        
    }//GEN-LAST:event_btEditarAActionPerformed

    private void cbBuscadorAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBuscadorAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBuscadorAActionPerformed

    private void btEliminarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarAActionPerformed
        // TODO add your handling code here:
        if(seleccionEliminacionValida()){
            int filas[] =tbActuadores.getSelectedRows();
            for (int i = 0; i < filas.length; i++) {
                int fila = filas[i];
                String id = tbActuadores.getValueAt(fila,0).toString();
                if(!archivo.eliminar_registro(id)){
                    JOptionPane.showMessageDialog(this,
                    "Ocurrió un error en la eliminación",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE); 
                    return ;
                }                
            }
            
            JOptionPane.showMessageDialog(this,
                    "Se realizó la eliminación correctamente",
                    "Eliminación",
                    JOptionPane.INFORMATION_MESSAGE);        
            consultarRegistroA();
        }
    }//GEN-LAST:event_btEliminarAActionPerformed

    private boolean seleccionEdicionValida(){
        int n = tbActuadores.getSelectedRowCount();
        if(n!=1){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un registro para editar",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    
    }
    
    private boolean formularioConsultaValidoA(){
        String tipo = cbBuscadorA.getSelectedItem().toString();
        String descripcion = tfselectorA.getText();
        
        if(!tipo.equals("Todo") && descripcion.equals("")){
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripción",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(tipo.equals("Id")){
            try{
                Integer.parseInt(descripcion);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un número",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Nombre")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Ubicacion")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Modelo")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Fabrica")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Tipo")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Descripcion")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripcion",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Estado")){
            try{
                descripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un numero",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        
        return true;
    }
    
    public void consultarRegistroA(){
                if(formularioConsultaValidoA()){
            String tipo = cbBuscadorA.getSelectedItem().toString();
            String descripcion = tfselectorA.getText();
            
            try{
                ArrayList<Actuador> registros = archivo.obtener_registroA();
                ArrayList<Actuador> resultado = new ArrayList<Actuador>();
                
                if(tipo.equals("Todo")){
                    resultado = registros;                
                }else{
                    for(Actuador p:registros) {
                        if(tipo.equals("Id")){
                            if(p.getaId().contains(descripcion)){
                                resultado.add(p);
                            }                        
                        }else if(tipo.equals("Nombre")){
                            if(p.getaNombre().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                        
                        }else if(tipo.equals("Estado")){
                            if(p.getaEstado()==Integer.parseInt(descripcion)){
                                resultado.add(p);
                            }
                        } else if (tipo.equals("Ubicacion")){
                            if(p.getaUbicacion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }
                        }  else if (tipo.equals("Modelo")){
                            if(p.getaModelo().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            } else if (tipo.equals("Fabrica")){
                            if(p.getaFabricante().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }
                        }  else if (tipo.equals("Tipo")){
                            if(p.getaTipo().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }
                        } else if (tipo.equals("Descripcion")){
                            if(p.getaDecripcion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }
                        }  
                        }                       
                    }                
                }
                
                DefaultTableModel dtm = (DefaultTableModel)tbActuadores.getModel();
                dtm.setRowCount(0);
                
                for(Actuador p:resultado){
                    Object[] fila = new Object[8];
                    fila[0] = p.getaId();
                    fila[1] = p.getaNombre();
                    fila[2] = p.getaUbicacion();
                    fila[3] = p.getaModelo();
                    fila[4] = p.getaFabricante();
                    fila[5] = p.getaTipo();
                    fila[6] = p.getaDecripcion();
                    fila[7] = p.getaEstado();
                    dtm.addRow(fila);                
                }
           }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar los registros",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            }            
        }
    }
    
    private boolean seleccionEliminacionValida(){ 
        int n = tbActuadores.getSelectedRowCount();
        if(n==0){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar mínimo un registro para eliminar",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        int op = JOptionPane.showConfirmDialog(this, "Está seguro de eliminar los registros seleccionados?","Eliminación",JOptionPane.YES_NO_OPTION);
        if(op==0)
            return true;
        else
            return false;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsultarA;
    private javax.swing.JButton btEditarA;
    private javax.swing.JButton btEliminarA;
    private javax.swing.JButton btIngresarA;
    private javax.swing.JComboBox cbBuscadorA;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbActuadores;
    private javax.swing.JTextField tfselectorA;
    // End of variables declaration//GEN-END:variables
}
